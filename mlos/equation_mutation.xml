<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.12" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd"  name="equation_mutation" projectName="1.  Hyperparameter Optimization" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="DOCKER_ENABLED" value="True" model="PA:Boolean"/>
    <variable name="DOCKER_GPU_ENABLED" value="True" model="PA:Boolean"/>
    <variable name="NODE_ACCESS_TOKEN" value="" model="PA:LIST(,GPU)"/>
    <variable name="INPUT_VARIABLES" value="{&quot;DEC_DROPOUT&quot;: 0.02, &quot;DEC_HIDDEN&quot;: 512,   &quot;DEC_LAYERS&quot;: 6, &quot;ENC_DROPOUT&quot;: 0.01, &quot;ENC_HIDDEN&quot;: 512,   &quot;ENC_LAYERS&quot;: 4,  &quot;N_BATCH&quot;: 32,  &quot;OPTIMIZER&quot;: &quot;optim.RMSprop&quot;, &quot;LEARNING_RATE&quot;: 0.005}" />
    <variable name="SEARCH_SPACE" value="[{&quot;ENC_HIDDEN&quot;: choice([125, 256, 512]),          &quot;DEC_HIDDEN&quot;: choice([512, 800]),          &quot;ENC_LAYERS&quot;: choice([1, 2, 4, 6]), &quot;DEC_LAYERS&quot;: choice([1, 2, 4, 6]),          &quot;ENC_DROPOUT&quot;: choice([0.01, 0.02, 0.01, 0.1, 0.2]),           &quot;DEC_DROPOUT&quot;: choice([0.01, 0.02, 0.01, 0.1, 0.2]),            &quot;N_BATCH&quot;: choice([32, 64, 512]),    &quot;LEARNING_RATE&quot;: choice([0.001, 0.005]),    &quot;OPTIMIZER&quot;: choice([&#39;optim.Adam&#39;, &#39;optim.Adadelta&#39;, &#39;optim.RMSprop&#39;]) }]" />
    <variable name="DATASET_PATH" value="https://activeeon-public.s3.eu-west-2.amazonaws.com/datasets/skating.zip" />
  </variables>
  <description>
    <![CDATA[ Trains a vae instance to generate valid and unique equations. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="caroline"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/keras.png"/>
    <info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
    <info name="Documentation" value="MLOS/MLOSUserGuide.html#_objective_ml_examples"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="equation_mutation" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ Trains a vae instance to generate valid and unique equations. ]]>
      </description>
      <variables>
        <variable name="TOKEN" value="{&quot;_token_id&quot;: 0}" inherited="true" />
        <variable name="DATA_PATH" value="https://activeeon-public.s3.eu-west-2.amazonaws.com/datasets/mutate.txt" inherited="false" />
        <variable name="VISDOM_ENABLED" value="False" inherited="true" model="PA:Boolean"/>
        <variable name="MOUNT_LOG_PATH" value="/media/andrews/storage1tb/tmp/" inherited="false" />
        <variable name="DOCKER_LOG_PATH" value="/tmp" inherited="false" />
        <variable name="ENC_HIDDEN" value="125" inherited="false" />
        <variable name="DEC_HIDDEN" value="512" inherited="false" />
        <variable name="ENC_LAYERS" value="6" inherited="false" />
        <variable name="DEC_LAYERS" value="1" inherited="false" />
        <variable name="ENC_DROPOUT" value="0.1" inherited="false" />
        <variable name="DEC_DROPOUT" value="0.05" inherited="false" />
        <variable name="N_BATCH" value="32" inherited="false" />
        <variable name="OPTIMIZER" value="RMSprop" inherited="false" />
        <variable name="LEARNING_RATE" value="0.005" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/keras.png"/>
        <info name="task.documentation" value="MLOS/MLOSUserGuide.html#_objective_ml_examples"/>
      </genericInformation>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_cuda_v4/raw" language="groovy"></file>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
params_encoded = variables.get('params_encoded')
token_encoded = variables.get('token_encoded')

// If encoded variables are found
if ((params_encoded != null && params_encoded.length() > 0) &&
    (token_encoded != null && token_encoded.length() > 0))
{
    println "Found encoded variables:"
    println "params_encoded: " + params_encoded
    println "token_encoded: " + token_encoded
    
    byte[] params_decoded = params_encoded.decodeBase64()
    byte[] token_decoded = token_encoded.decodeBase64()
    
    input_variables = new String(params_decoded)
    token = new String(token_decoded)
    
    variables.put('INPUT_VARIABLES', input_variables)
    variables.put('TOKEN', token)
}
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import argparse
import glob
import logging as log
import math
import os
import sys
import uuid
import wget
import zipfile
from os.path import basename, splitext, exists, join
from os import remove, listdir, makedirs

import chocolate as choco
import cv2
import numpy as np
import pandas as pd
import pybgs as bgs
#from numba import jit

if sys.version_info >= (3, 0):
    from six.moves import xrange

print("OpenCV Version: {}".format(cv2.__version__))


# Get current job ID
PA_JOB_ID = variables.get("PA_JOB_ID")


DATA_PATH = str(variables.get("DATA_PATH"))


# Check parent job ID
PARENT_JOB_ID = genericInformation.get('PARENT_JOB_ID')

env = 'main'
if PARENT_JOB_ID is not None:
    env = 'job_id_' + PARENT_JOB_ID
###################################################################


print("DATA_PATH: " + DATA_PATH)

if DATA_PATH is not None and DATA_PATH.startswith("http"):
    # Get an unique ID
    ID = str(uuid.uuid4())

    # Define localspace
    LOCALSPACE = join('data', ID)
    os.makedirs(LOCALSPACE, exist_ok=True)
    print("LOCALSPACE:  " + LOCALSPACE)

    DATASET_NAME = splitext(DATA_PATH[DATA_PATH.rfind("/") + 1:])[0]
    DATASET_PATH = join(LOCALSPACE, DATASET_NAME)
    os.makedirs(DATASET_PATH, exist_ok=True)

    print("Dataset information: ")
    print("DATASET_NAME: " + DATASET_NAME)
    print("DATASET_PATH: " + DATASET_PATH)

    print("Downloading...")
    filename = wget.download(DATA_PATH, DATASET_PATH)
    print("FILENAME: " + filename)
    print("OK")
    
    
DATASET= variables.get("DATASET_PATH")
print("DATASET: " + DATASET)
# Define the path to save the model
OUTPUT_PATH = variables.get("DOCKER_LOG_PATH")
#OUTPUT_PATH = '/media/andrews/storage1tb/tmp/'


if DATASET is not None and DATASET.startswith("http"):
    # Get an unique ID
    ID = str(uuid.uuid4())

    # Define localspace
    LOCALSPACE = join(OUTPUT_PATH, 'data', ID)
    os.makedirs(LOCALSPACE, exist_ok=True)
    print("LOCALSPACE:  " + LOCALSPACE)

    DATASET_NAME = splitext(DATASET[DATASET.rfind("/") + 1:])[0]
    DATASET_PATH = join(LOCALSPACE, DATASET_NAME)
    os.makedirs(DATASET_PATH, exist_ok=True)

    print("Dataset information: ")
    print("DATASET_NAME: " + DATASET_NAME)
    print("DATASET_PATH: " + DATASET_PATH)

    print("Downloading...")
    filename2 = wget.download(DATASET, DATASET_PATH)
    print("FILENAME: " + filename2)
    print("OK")

    print("Extracting...")
    dataset_zip = zipfile.ZipFile(filename2)
    dataset_zip.extractall(DATASET_PATH)
    dataset_zip.close()
    remove(filename2)
    print("OK")

#############################################################################

if not os.path.isfile(filename):
	print("File " + str(filename) + " does not exists!")
    
with open(filename) as fp:
	for i, equation in enumerate(fp):
		equation = equation.replace("\n", "")

def compute_lbp(img_gray, lbp_str, neighboor=3, s=0, a_=0.01):
    img_lbp = np.zeros_like(img_gray)
    a = np.zeros((1, 1, 1), dtype=np.float)
    a[0] = a_
    for ih in range(0, img_gray.shape[0] - neighboor):  # loop by line
        for iw in range(0, img_gray.shape[1] - neighboor):
            # Get matrix image 3 by 3 pixel
            Z = (img_gray[ih:ih + neighboor, iw:iw + neighboor])  # .astype(np.float)
            C = (Z[1, 1])  # float
            s = eval(lbp_str)
            lbp = ((s >= 0) * 1.0)  # .astype(np.uint8)
            img_vector = np.delete(lbp.T.flatten(), 4)
            # Convert the binary operated values to a decimal (digit)
            where_lbp_vector = np.where(img_vector)[0]
            num = np.sum(2 ** where_lbp_vector) if len(where_lbp_vector) >= 1 else 0
            img_lbp[ih + 1, iw + 1] = num
    return img_lbp

def compare_fg_gt(img_fg, img_gt, img_gt_path):
    # TP - # of foreground pixels classified as foreground pixels.
    # FP - # of background pixels classified as foreground pixels.
    # TN - # of background pixels classified as background pixels.
    # FN - # of foreground pixels classified as background pixels.
    TP = .0  # True positive pixels
    FP = .0  # False positive pixels
    TN = .0  # True negative pixels
    FN = .0  # False negative pixels
    # blue  = [255, 0, 0]
    green = [0, 255, 0]  # for FN
    red = [0, 0, 255]  # for FP
    white = [255, 255, 255]  # for TP
    black = [0, 0, 0]  # for TN
    rows, cols = img_gt.shape
    img_sc = np.zeros((rows, cols, 3), np.uint8)
    for i in xrange(rows):
        for j in xrange(cols):
            pixel_gt = img_gt[i, j]
            pixel_fg = img_fg[i, j]
            if pixel_gt == 85:
                break
            if (pixel_gt == 255 and pixel_fg == 255):
                TP = TP + 1
                img_sc[i, j] = white
            if (pixel_gt == 0 and pixel_fg == 255):
                FP = FP + 1
                img_sc[i, j] = red
            if (pixel_gt == 0 and pixel_fg == 0):
                TN = TN + 1
                img_sc[i, j] = black
            if (pixel_gt == 255 and pixel_fg == 0):
                FN = FN + 1
                img_sc[i, j] = green
        if pixel_gt == 85:
            break
    return img_sc.copy(), TP, FP, TN, FN

eq_symbols = [chr(i) for i in range(32, 127)]  # 95
ss_symbols = ['+', '-', '*', '/']  # 4
no_symbols = ['(', 'Z', 'C', 'a', ')', ' ', '"', "'", ',', '.', '\\', '[', ']', '`', '^', '{', '}', ':', ';', '-', '=',
              '<', '>', '~', '|', '_'] + ss_symbols  # 30
va_symbols = list(set(eq_symbols) - set(no_symbols))  # 66 (max 33)
va_symbols.sort()

def process_structure(equation):
    print(" processing structure: " + equation)
    eq_split = equation.split("o")  # ['((Z', 'C)', '(Z', 'C))']
    search_space = {}
    new_equation = eq_split[0]
    for j in range(len(eq_split) - 1):
        j_symbol = va_symbols[j]
        search_space[j_symbol] = choco.choice(ss_symbols)
        new_equation = new_equation + j_symbol + eq_split[j + 1]
    # linear:
    # max_iterations = (len(eq_split)-1) * len(ss_symbols)
    #
    # exponential:
    max_iterations = int(math.pow(len(ss_symbols), (len(eq_split) - 1)))
    #
    # limit: 4^5
    if max_iterations > 1024:
        max_iterations = 1024
    #
    print(equation + " max_iterations: " + str(max_iterations))
    best_loss, best_params, best_mutation = mutate_equation(new_equation, search_space, max_iterations)
    return best_loss, best_params, best_mutation, max_iterations

def process_equation(equation):
    print("processing equation: " + equation)
    loss = eval_equation(equation)
    return loss

def mutate_equation(new_equation, search_space, max_iterations):
    database_url = "sqlite:///chocolate_" + str(i) + ".db"
    conn = choco.SQLiteConnection(url=database_url)
    conn.clear()
    sampler = choco.MOCMAES(conn, search_space, mu=2)
    best_loss = 1
    best_params = None
    best_equation = None
    try:
        for n in range(max_iterations):
            token, params = sampler.next()
            print(new_equation + " iter " + str(n + 1) + " of " + str(max_iterations))
            loss, eq = score_equation(new_equation, params)
            if loss < best_loss:
                best_loss = loss
                best_params = params
                best_equation = eq
            # print(n, " loss: ", loss)
            sampler.update(token, loss)
    # except:
    #     pass
    except Exception as err:
        print(" unexpected error:\n", err)
    return [best_loss, best_params, best_equation]

def eval_equation(equation):
    loss = 1
    try:
        loss, eq = score_equation(equation)
    except Exception as err:
        print(" unexpected error:\n", err)
    return [loss]

# 128x96, 150 images, disabled imshow
# 64x48, 150 images, disabled imshow
def score_equation(equation, args, params=None):
    if params is not None:
        for key in params:
            equation = equation.replace(key, params[key])
        print(" scoring mutation: " + equation)
    else:
        print(" scoring equation: " + equation)
    img_in_folder = join(filename, 'skating', 'input')
    img_in_array = sorted(glob.iglob(img_in_folder + '/*.jpg'))
    print(" in folder " + img_in_folder + " " + str(len(img_in_array)))
    img_gt_folder = join(filename2, 'skating', 'groundtruth')
    img_gt_array = sorted(glob.iglob(img_gt_folder + '/*.png'))
    print(" gt folder " + img_gt_folder + " " + str(len(img_gt_array)))
    #
    # background subtraction algorithm
    algorithm = bgs.LBP_MRF()
    # print("Running ", algorithm.__class__)
    # TP - # of foreground pixels classified as foreground pixels.
    # FP - # of background pixels classified as foreground pixels.
    # TN - # of background pixels classified as background pixels.
    # FN - # of foreground pixels classified as background pixels.
    # PR - # of true positive pixels / (# of true positive pixels + # of false positive pixels).
    # RE - # of true positive pixels / (# of true positive pixels + # of false negative pixels).
    # FS = 2 × (PR × RE)/(PR + RE).
    # *** Also known as F1 score, F-score or F-measure.
    TP = .0  # True positive pixels
    FP = .0  # False positive pixels
    TN = .0  # True negative pixels
    FN = .0  # False negative pixels
    RE = .0  # TP / (TP + FN)
    PR = .0  # TP / (TP + FP)
    FS = .0  # 2*(PR*RE)/(PR+RE)
    enable_imshow = args.imshow
    # loop x times as files in our folder
    start = time.time()
    for x in range(0, len(img_in_array)):
        start_in = time.time()
        # we can loop now through our array of images
        img_in_path = img_in_array[x]  # input/in000300.jpg
        # read file into opencv
        img_gray = cv2.imread(img_in_path, cv2.IMREAD_GRAYSCALE)
        if args.resize is not None:
            img_gray = cv2.resize(img_gray, None, fx=args.resize, fy=args.resize, interpolation=cv2.INTER_AREA)
        if x == 0:
            print(" img in size " + str(img_gray.shape))
        if enable_imshow:
            cv2.imshow('img_gray', img_gray)
        # compute lbp
        img_gray = img_gray.astype(np.float)
        if args.disable_lbp:
            img_lbp = img_gray.copy()
        else:
            try:
                img_lbp = compute_lbp(img_gray, lbp_str=equation)
            except:
                img_lbp = np.zeros_like(img_gray)
        img_lbp = img_lbp.astype(np.uint8)
        if enable_imshow:
            cv2.imshow('img_lbp', img_lbp)
        # background subtraction
        img_gt_path = img_gt_array[x]
        img_gt = cv2.imread(img_gt_path, cv2.IMREAD_GRAYSCALE)
        if args.resize is not None:
            img_gt = cv2.resize(img_gt, None, fx=args.resize, fy=args.resize, interpolation=cv2.INTER_NEAREST)
        if x == 0:
            print(" img gt size " + str(img_gt.shape))
        img_fg = algorithm.apply(img_lbp)
        img_bg = algorithm.getBackgroundModel()
        # show images in python imshow window
        if enable_imshow:
            cv2.imshow('img_gt', img_gt)
            cv2.imshow('img_fg', img_fg)
        if (args.skip == -1) or (args.skip > 0 and x > (args.skip - 1)):
            img_sc, tp, fp, tn, fn = compare_fg_gt(img_fg, img_gt, img_gt_path)
        else:
            print(" ignoring frame " + str(x))
            img_sc = np.zeros_like(img_gray)
            tp, fp, tn, fn = [0, 0, 0, 0]
        print(str(x) + " elapsed time: " + str(time.time() - start_in))
        TP = TP + tp
        FP = FP + fp
        TN = TN + tn
        FN = FN + fn
        if enable_imshow:
            cv2.imshow('img_sc', img_sc)
        if enable_imshow:
            cv2.waitKey(100)
            time.sleep(.1)
        if args.saveoutput:
            if not os.path.isdir(args.output_folder):
                os.mkdir(args.output_folder)
            img_fg_folder = os.path.join(args.output_folder, "fg")
            img_sc_folder = os.path.join(args.output_folder, "sc")
            if not os.path.isdir(img_fg_folder):
                os.mkdir(img_fg_folder)
            if not os.path.isdir(img_sc_folder):
                os.mkdir(img_sc_folder)
            cv2.imwrite(os.path.join(img_fg_folder, os.path.basename(img_in_path)), img_fg)
            cv2.imwrite(os.path.join(img_sc_folder, os.path.basename(img_in_path)), img_sc)
            if not args.disable_lbp:
                img_lbp_folder = os.path.join(args.output_folder, "lbp")
                if not os.path.isdir(img_lbp_folder):
                    os.mkdir(img_lbp_folder)
                cv2.imwrite(os.path.join(img_lbp_folder, os.path.basename(img_in_path)), img_lbp)
        # break
    print(equation + " elapsed time " + str(time.time() - start))
    try:
        RE = TP / (TP + FN)
    except:
        pass
    try:
        PR = TP / (TP + FP)
    except:
        pass
    try:
        FS = (2 * PR * RE) / (PR + RE)
    except:
        pass
    loss = (1 - FS)
    print(equation + " loss: " + str(loss))
    if args.saveoutput:
        output_file = os.path.join(args.output_folder, "results.txt")
        with open(output_file, "w") as text_file:
            if not args.disable_lbp:
                text_file.write("{0}\n".format(equation))
            text_file.write("RE: {0}\n".format(RE))
            text_file.write("PR: {0}\n".format(PR))
            text_file.write("FS: {0}\n".format(FS))
            text_file.write("loss: {0}\n".format(loss))
    if enable_imshow:
        cv2.waitKey(5000)
        time.sleep(5)
        cv2.destroyAllWindows()
    return [loss, equation]

process_structure(equation)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            285
        </positionTop>
        <positionLeft>
            456.234375
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2080px;
            height:2296px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-280px;left:-451.234375px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_ active-task" id="jsPlumb_1_88" style="top: 285px; left: 456.234px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Trains a vae instance to generate valid and unique equations."><img src="/automation-dashboard/styles/patterns/img/wf-icons/keras.png" width="20px">&nbsp;<span class="name">equation_mutation</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 504.5px; top: 315px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 504.5px; top: 275px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>